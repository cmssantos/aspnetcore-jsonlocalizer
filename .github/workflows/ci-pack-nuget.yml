name: CI Pack NuGet

on:
  push:
    branches:
      - main

jobs:
  build-test-pack:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal

      - name: Get latest version tag
        id: version
        run: |
          latest_tag=$(git tag --list "v*" --sort=-creatordate | head -n 1)
          echo "Latest tag: $latest_tag"

          if [[ "$latest_tag" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
            new_patch=$((patch + 1))
            new_version="$major.$minor.$new_patch"
          else
            new_version="0.1.0"
          fi

          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Update .csproj version
        run: |
          find ./src -name "*.csproj" -exec sed -i "s|<Version>.*</Version>|<Version>${{ steps.version.outputs.new_version }}</Version>|" {} \;

      - name: Pack NuGet package
        run: dotnet pack --configuration Release --no-build --output ./artifacts

      - name: List artifacts directory (debug)
        run: ls -l ./artifacts

      - name: Generate changelog
        run: |
          echo "Release v${{ steps.version.outputs.new_version }}" > changelog.txt
          git log -1 --pretty=format:"- %s" >> changelog.txt

      - name: Create Git tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag v${{ steps.version.outputs.new_version }} || echo "Tag already exists"
          git push origin v${{ steps.version.outputs.new_version }} || echo "Tag push failed, maybe already exists"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
            tag_name: v${{ steps.version.outputs.new_version }}
            release_name: Release v${{ steps.version.outputs.new_version }}
            body_path: changelog.txt
            draft: false
            prerelease: false
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./artifacts/*.nupkg
            asset_name: mypackage-${{ steps.version.outputs.new_version }}.nupkg
            asset_content_type: application/octet-stream
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
